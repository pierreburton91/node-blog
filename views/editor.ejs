<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
    <!-- <meta http-equiv="x-ua-compatible" content="ie=edge"> -->
    <title>New Blogpost</title>
    <meta name="description" content="">
    <meta name="author" content="Pierre Burton">
    <meta name="viewport" content="initial-scale=1.0, minimum-scale=1.0, user-scalable=no, maximum-scale=1.0, width=device-width">
    <meta name="format-detection" content="telephone=no">
    <meta name="theme-color" content="#">
    <meta name="msapplication-navbutton-color" content="#">
    <link rel="apple-touch-icon" href="images/apple-touch-icon.png">
    <link rel="icon" type="image/png" href="images/favicon.png">
    <meta name="msapplication-square150x150logo" content="images/tile.png">
    <meta name="msapplication-wide310x150logo" content="images/tile-wide.png">
    <!-- Twitter card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@">
    <meta name="twitter:creator" content="@">
    <meta name="twitter:title" content="">
    <meta name="twitter:description" content="">
    <meta name="twitter:image" content="">
    <!-- Open graphs -->
    <meta property="og:title" content="">
    <meta property="og:type" content="article">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <meta property="og:description" content="">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css" />
    <link rel="stylesheet" href="styles/styles.css">
</head>
<body>
<div class="container">
    <div class="header">
        <h1><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Write a new blog post</h1>
        <div class="editor-actions">
            <button onclick="goBack()" class="button cancel">Cancel</button>
            <button onclick="submit()" id="publish" class="button submit">Publish</button>
        </div>
    </div>
    <label class="labeled">
        <input type="text" class="inputs heading" name="post-title" placeholder="Your title" required/>
    </label>
    <label class="labeled">
        <textarea class="inputs" placeholder="Your story..."></textarea>
    </label>
    <h3>About your post</h3>
    <label class="labeled">
        <input type="text" name="about" class="inputs" required/>
        <span class="float-label">What is your post about ?</span>
        <div class="bottom-line"></div>
        <div class="bottom-line-active"></div>
    </label>
    <label class="labeled">
        <input type="text" name="about-link" class="inputs" required/>
        <span class="float-label">Can you provide a link ?</span>
        <div class="bottom-line"></div>
        <div class="bottom-line-active"></div>
    </label>
    <label class="labeled">
        <select class="inputs" required>
            <option selected value></option>
            <option>Value1</option>
            <option>Value2</option>
            <option>Value3</option>
        </select>
        <span class="float-label">Category</span>
        <div class="bottom-line"></div>
        <div class="bottom-line-active"></div>
    </label>
    <label class="labeled">
        <input type="text" name="tags" class="inputs" required/>
        <span class="float-label">Tags</span>
        <div class="bottom-line"></div>
        <div class="bottom-line-active"></div>
        <span class="hint">Separate tags with a coma. Up to 5 tags.</span>
    </label>
</div>
<div class="upload">
    <div class="upload-overlay"></div>
    <div class="upload-modal">
        <div id="upload-form">
            <label class="dragndrop">
                <input type="file" name="upload-file" accept="image/*">
                <i class="fa fa-picture-o" aria-hidden="true"></i>
                <p>Drag and drop or click here<br><span>to upload your image</span></p>
            </label>
            <p>or</p>
            <label class="labeled">
                <input type="text" name="file-link" class="inputs" placeholder="http://example.com/image.png" required/>
                <span class="float-label">Provide a link</span>
                <div class="bottom-line"></div>
                <div class="bottom-line-active"></div>
            </label>
            <span>Accepted files are images .jpeg, .png or .gif, max 2Mo.</span>
        </div>
        <div class="upload-preview">
            <div class="image-preview">
                <img id="previewed" src="" />
                <span class="preview-error"></span>
            </div>
            <a href="#" id="cancel-upload">Cancel and add another image</a>
        </div>
        <div class="editor-actions">
            <button id="upload-close" class="button borderless">Close</button>
            <button id="upload-confirm" class="button" disabled="true">Add picture</button>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<script type="text/javascript">
    var uploadView = document.querySelector('.upload'),
        uploadForm = document.querySelector('#upload-form'),
        uploadInput = document.querySelector('input[name="upload-file"]'),
        dropZone = document.querySelector('.dragndrop'),
        fileLink = document.querySelector('input[name="file-link"'),
        uploadPreviewContainer = document.querySelector('.upload-preview'),
        uploadPreview = document.querySelector('#previewed'),
        imagePreviewContainer = document.querySelector('.image-preview'),
        previewError = document.querySelector('.preview-error'),
        cancelPreviewButton = document.querySelector('#cancel-upload'),
        cancelUploadButton = document.querySelector('#upload-close'),
        uploadButton = document.querySelector('#upload-confirm'),
        acceptedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"],
        simplemde = new SimpleMDE({
        spellChecker: false,
        forceSync: true,
        insertTexts: {link: ["[text to display](http://...)",""]},
        toolbar: ["bold", "italic", "heading-2", "heading-3", "|", "quote", "unordered-list", "ordered-list", "|", "link", {
            name: "Image",
            action: function uploadImage(editor) {

                uploadView.style.display = "block";

                var promise = new Promise(function(resolve, reject) {

                    function handleUpload(event) {
                        uploadInput.removeEventListener('change', handleUpload);
                        dropZone.removeEventListener('drop', handleUpload);
                        fileLink.removeEventListener('keyup', handleUploadDebounced);
                        cancelUploadButton.removeEventListener('click', closeUploadView);
                        resolve(event);
                    }
                    function closeUploadView() {
                        uploadInput.removeEventListener('change', handleUpload);
                        dropZone.removeEventListener('drop', handleUpload);
                        fileLink.removeEventListener('keyup', handleUploadDebounced);
                        cancelUploadButton.removeEventListener('click', closeUploadView);
                        reject()
                    }
                    uploadInput.addEventListener('change', handleUpload);
                    dropZone.addEventListener('drop', handleUpload);
                    var handleUploadDebounced = debounce(handleUpload, 2000);
                    fileLink.addEventListener('keyup', handleUploadDebounced);
                    cancelUploadButton.addEventListener('click', closeUploadView);
                });

                promise.then(function(event) {
                    if (event.type == "change") {
                        var file = uploadInput.files[0];

                        uploadForm.style.display = "none";
                        uploadPreviewContainer.style.display = "block";

                        if (acceptedTypes.indexOf(file.type) != -1 && file.size <= 2097152) {
                            uploadButton.disabled = false;
                            readURL(uploadInput);
                        }
                        else if (acceptedTypes.indexOf(file.type) == -1) {
                            var errorMessage = "The file you are trying to import is not a valid image file.";

                            previewError.innerHTML = errorMessage;
                            previewError.style.display = "block";
                        }
                        else if (file.size > 2097152) {
                            var errorMessage = "The file you are trying to import weights more than 2Mo.";

                            previewError.innerHTML = errorMessage;
                            previewError.style.display = "block";
                        }

                        return new Promise(function(resolve, reject) {
                            function confirmUpload() {
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                cancelUploadButton.removeEventListener('click', closeUploadView);

                                var formData = new FormData(),
                                    xhr = new XMLHttpRequest();

                                formData.append('file', file);
                                xhr.onreadystatechange = function() {
                                    if (this.readyState == 4) {
                                        if (this.status == 200) {
                                            var response = JSON.parse(this.responseText),
                                                imageLink = response.data.link;
                                            resolve(imageLink);
                                        }
                                        else {
                                            console.log(this.status, this.statusText, this.getAllResponseHeaders());
                                            reject(false);
                                        }
                                    }
                                }
                                xhr.open("POST", "/api/upload-image", true);
                                xhr.send(formData);
                                
                            }
                            function cancelAndChange() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(true);
                            }
                            function closeUploadView() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(false)
                            }

                            uploadButton.addEventListener('click', confirmUpload);
                            cancelPreviewButton.addEventListener('click', cancelAndChange);
                            cancelUploadButton.addEventListener('click', closeUploadView);
                        });
                        
                    }
                    else if (event.type == "drop") {
                        event.preventDefault();
                        event.stopPropagation();

                        var file = event.dataTransfer.files[0];
                        
                        dropZone.classList.remove("dragover");
                        uploadForm.style.display = "none";
                        uploadPreviewContainer.style.display = "block";

                        if (acceptedTypes.indexOf(file.type) != -1 && file.size <= 2097152) {
                            uploadButton.disabled = false;
                            readURL(event);
                        }
                        else if (acceptedTypes.indexOf(file.type) == -1) {
                            var errorMessage = "The file you are trying to import is not a valid image file.";

                            previewError.innerHTML = errorMessage;
                            previewError.style.display = "block";
                        }
                        else if (file.size > 2097152) {
                            var errorMessage = "The file you are trying to import weights more than 2Mo.";

                            previewError.innerHTML = errorMessage;
                            previewError.style.display = "block";
                        }

                        return new Promise(function(resolve, reject) {
                            function confirmUpload() {
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                
                                var formData = new FormData(),
                                    xhr = new XMLHttpRequest();

                                formData.append('file', file);
                                xhr.onreadystatechange = function() {
                                    if (this.readyState == 4) {
                                        if (this.status == 200) {
                                            var response = JSON.parse(this.responseText),
                                                imageLink = response.data.link;
                                            resolve(imageLink);
                                        }
                                        else {
                                            console.log(this.status, this.statusText, this.getAllResponseHeaders());
                                            reject(false);
                                        }
                                    }
                                }
                                xhr.open("POST", "/api/upload-image", true);
                                xhr.send(formData);
                            }
                            function cancelAndChange() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(true);
                            }
                            function closeUploadView() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(false)
                            }

                            uploadButton.addEventListener('click', confirmUpload);
                            cancelPreviewButton.addEventListener('click', cancelAndChange);
                            cancelUploadButton.addEventListener('click', closeUploadView);
                        });
                    }
                    else if (event.type == "keyup") {
                        var link = event.target.value;

                        uploadForm.style.display = "none";
                        uploadPreviewContainer.style.display = "block";
                        
                        if (link.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                            uploadButton.disabled = false;
                            readURL(link);
                        }
                        else if (link.match(/\.(jpeg|jpg|gif|png)$/) == null) {
                            var errorMessage = "The link you provided is not pointing to an image or couldn't be verified.";

                            previewError.innerHTML = errorMessage;
                            previewError.style.display = "block";
                        }

                        return new Promise(function(resolve, reject) {
                            function confirmUpload() {
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                resolve(link);
                            }
                            function cancelAndChange() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(true);
                            }
                            function closeUploadView() {
                                cancelPreviewButton.removeEventListener('click', cancelAndChange);
                                uploadButton.removeEventListener('click', confirmUpload);
                                cancelUploadButton.removeEventListener('click', closeUploadView);
                                reject(false)
                            }

                            uploadButton.addEventListener('click', confirmUpload);
                            cancelPreviewButton.addEventListener('click', cancelAndChange);
                            cancelUploadButton.addEventListener('click', closeUploadView);
                        });
                    }
                }, function(err) {
                    uploadView.style.display = "none";
                    uploadButton.disabled = true;
                    fileLink.value = "";
                    uploadInput.value = "";
                    uploadForm.style.display = "block";
                    uploadPreviewContainer.style.display = "none";
                    throw err;
                }).then(function(result){
                    uploadView.style.display = "none";
                    uploadButton.disabled = true;
                    fileLink.value = "";
                    uploadInput.value = "";
                    uploadForm.style.display = "block";
                    uploadPreviewContainer.style.display = "none";

                    editor.options.insertTexts.image[0] = "![]("+result+")";
                    editor.options.insertTexts.image[1] = "";

                    simplemde.drawImage();
                }, function(err) {
                    uploadView.style.display = "none";
                    uploadForm.style.display = "block";
                    uploadPreviewContainer.style.display = "none";
                    previewError.style.display = "none";
                    fileLink.value = "";
                    uploadInput.value = "";
                    uploadButton.disabled = true;
                    if(err) {
                        uploadImage();
                    }
                    else {
                        uploadView.style.display = "none";
                    }
                });
            },
            className: "fa fa-picture-o",
            title: "Insert Image"
            }, "|", "preview", "side-by-side", "fullscreen", "|", "guide"]
        }),
        tagsInput = document.querySelector('input[name="tags"'),
        tagsContainer = tagsInput.closest('.labeled'),
        tags = [];

    dropZone.addEventListener("dragover", function( event ) {
        event.preventDefault();
        event.stopPropagation();
        dropZone.classList.add("dragover");
    }, false);
    dropZone.addEventListener("dragleave", function( event ) {
        event.preventDefault();
        event.stopPropagation();
        dropZone.classList.remove("dragover");
    }, false);

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            
            reader.onload = function (e) {
                uploadPreview.setAttribute('src', e.target.result);
            }
            
            reader.readAsDataURL(input.files[0]);
        }
        else if (input.dataTransfer && input.dataTransfer.files[0]) {
            var reader = new FileReader();
            
            reader.onload = function (e) {
                uploadPreview.setAttribute('src', e.target.result);
            }
            
            reader.readAsDataURL(input.dataTransfer.files[0]);
        }
        else {
            uploadPreview.setAttribute('src', input);
        }
    }

    /**
     * Retourne une fonction qui, tant qu'elle continue à être invoquée,
     * ne sera pas exécutée. La fonction ne sera exécutée que lorsque
     * l'on cessera de l'appeler pendant plus de N millisecondes.
     * Si le paramètre `immediate` vaut vrai, alors la fonction 
     * sera exécutée au premier appel au lieu du dernier.
     * Paramètres :
     *  - func : la fonction à `debouncer`
     *  - wait : le nombre de millisecondes (N) à attendre avant 
     *           d'appeler func()
     *  - immediate (optionnel) : Appeler func() à la première invocation
     *                            au lieu de la dernière (Faux par défaut)
     *  - context (optionnel) : le contexte dans lequel appeler func()
     *                          (this par défaut)
     */
    function debounce(func, wait, immediate, context) {
        var result;
        var timeout = null;
        return function() {
            var ctx = context || this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) result = func.apply(ctx, args);
            };
            var callNow = immediate && !timeout;
            // Tant que la fonction est appelée, on reset le timeout.
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) result = func.apply(ctx, args);
            return result;
        };
    }

    /* Closest polyfill */
    if (window.Element && !Element.prototype.closest) {
        Element.prototype.closest = 
        function(s) {
            var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                    i,
                    el = this;
            do {
                i = matches.length;
                while (--i >= 0 && matches.item(i) !== el) {};
            } while ((i < 0) && (el = el.parentElement)); 
                return el;
        };
    }

    /* Add tags and resize the input when hitting the coma
    prevents writting new tags if 5 tags are already there
    prevents a bug where writting a single coma cause the layout to break */
    tagsInput.addEventListener('keyup', function(e) {
        if (tags.length == 5 && e.keyCode == 188) {
            return false;
        }
        else if (e.target.value == ",") {
            tagsInput.value = "";
        }
        else if (e.keyCode == 188) {
            var inputValue = e.target.value,
                tag = inputValue.substring(0, inputValue.length - 1),
                tagBox = document.createElement('span'),
                tagBoxText = document.createTextNode(tag),
                offset = 0;

            tagsInput.value = "";
            if (!document.querySelector('input[name="tags"] + .float-label').classList.contains("active")) {
                document.querySelector('input[name="tags"] + .float-label').classList.add("active");
            }
            tags.push(tag);
            tagBox.classList.add('tags');
            tagBox.appendChild(tagBoxText);
            tagsContainer.insertBefore(tagBox, tagsInput);

            var tagBoxGroup = document.querySelectorAll('.tags');

            for(var i=0 ; i < tagBoxGroup.length ; i++) {
                offset += tagBoxGroup[i].offsetWidth + 9;
                tagsInput.style.width = "calc(100% - "+ offset +"px)";
            }
        }
    });

    /* Removes last tag on hitting return if input is empty
    and prevents writting new tags if 5 tags are already there */
    tagsInput.addEventListener('keydown', function(e) {
        if (e.keyCode == 8 && tagsInput.value == "") {
            var tagBoxGroup = document.querySelectorAll('.tags'),
                lastItem = tagBoxGroup.length;
            if (tagBoxGroup.length > 0) {
                tagsContainer.removeChild(tagsContainer.childNodes[lastItem]);
                tags.pop();
            }
            if (tagBoxGroup.length == 1) {
                document.querySelector('input[name="tags"] + .float-label').classList.remove("active");
            }
        }
        else if (tags.length == 5 && e.keyCode != 8) {
            e.preventDefault();
            e.stopPropagation();
        }
    });

    /* Removes tags on click */
    tagsContainer.addEventListener('click', function(e){
        if(e.target && e.target.matches(".tags")) {
            var tagBoxGroup = document.querySelectorAll('.tags'),
                currentItem = e.target.innerHTML,
                tagToDelete = tags.indexOf(currentItem);

            tagsContainer.removeChild(tagsContainer.childNodes[tagToDelete + 1]);
            tags.splice(tagToDelete, 1);
            if(tags.length == 0) {
                document.querySelector('input[name="tags"] + .float-label').classList.remove("active");
            }
        }
    });

    function goBack() {
        var title = document.querySelector('input[name="post-title"'),
            articleBody = document.querySelector('textarea');

        if (title.value != "" || articleBody.value != "") {
            var confirm = window.confirm("Are your sure ? All your work will be lost.");
            console.log(simplemde.options.previewRender(articleBody.value));
            if (confirm == true) {
                window.location.href = "/";
            }
            else {
                return false;
            }
        }
        else {
            window.location.href = "/";
        }
    }
</script>
</body>
</html>